@model IEnumerable<AspnetCoreMvcFull.Models.ViewModels.PermissionListViewModel>

@{
	ViewData["Title"] = "Permissions List";
}

<div class="content-wrapper">
	<div class="container-xxl flex-grow-1 container-p-y">
		<h4 class="py-3 mb-4"><span class="text-muted fw-light">Access Control /</span> Permissions List</h4>

		<div class="card shadow-sm rounded-3">
			@* Main card wrapper *@
			<div class="card-header d-flex justify-content-between align-items-center bg-light py-3">
				<h5 class="card-title fw-bold text-dark mb-0">Permissions List</h5>
				<a href="javascript:;" data-bs-toggle="modal" data-bs-target="#addPermissionModal" class="btn btn-primary shadow-sm">
					<i class="fas fa-plus-circle me-2"></i> Create New Permission
				</a>
			</div>
			<div class="card-body p-4">

				@* Alert Messages *@
				@if (ViewBag.SuccessMessage != null)
				{
					<div class="alert alert-success alert-dismissible fade show" role="alert">
						@ViewBag.SuccessMessage
						<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
					</div>
				}
				@if (TempData["ErrorMessage"] != null)
				{
					<div class="alert alert-danger alert-dismissible fade show" role="alert">
						@TempData["ErrorMessage"]
						<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
					</div>
				}

				@* Filtering and Search Section *@
				<div class="mb-4">
					<form asp-action="Index" method="get" class="d-flex flex-wrap align-items-end gap-3">
						<div class="flex-grow-2">
							<label for="searchQuery" class="form-label mb-1">Search by Name:</label>
							@* For simplicity, this uses a generic "searchQuery" which your controller would need to handle *@
							<input type="text" name="searchQuery" id="searchQuery" value="@ViewBag.CurrentSearchQuery" class="form-control shadow-sm" placeholder="Enter permission name..." />
						</div>
						<div class="d-flex gap-2">
							<button type="submit" class="btn btn-secondary shadow-sm">
								<i class="ri-filter-line me-1"></i> Apply Filters
							</button>
							<a asp-action="Index" class="btn btn-outline-secondary shadow-sm">
								<i class="ri-refresh-line me-1"></i> Reset
							</a>
						</div>
					</form>
				</div>

				<div class="table-responsive">
					<table id="permissionsTable" class="table table-striped table-hover w-100">
						<thead>
							<tr>
								<th>Name</th>
								<th>Assigned To</th>
								<th>Created Date</th>
								<th class="text-center">Actions</th>
							</tr>
						</thead>
						<tbody class="table-border-bottom-0">
							@if (!Model.Any())
							{
								<tr>
									<td colspan="4" class="text-center py-4 text-muted">No permissions found.</td>
								</tr>
							}
							else
							{
								@foreach (var permission in Model)
								{
									<tr data-permission-name="@permission.Name">
										<td class="permission-name-cell">@permission.Name</td>
										<td>
											<div class="d-flex align-items-center flex-wrap gap-1">
												@* Added flex-wrap and gap-1 for better badge display *@
												@if (permission.AssignedToRoles.Any())
												{
													@foreach (var roleName in permission.AssignedToRoles)
													{
														<span class="badge bg-label-primary">@roleName</span>
													}
												}
												else
												{
													<span class="text-muted">No roles assigned</span>
												}
												<span class="text-muted">(@permission.AssignedToCount)</span>
											</div>
										</td>
										<td>@permission.CreatedDate.ToShortDateString()</td>
										<td class="text-center">
											<div class="d-inline-block text-nowrap">
												<button class="btn btn-sm btn-icon btn-outline-secondary me-1" title="Edit Permission"
														onclick="showEditPermissionModal('@permission.Name', this.closest('tr'))">
													<i class="ri-edit-line"></i>
												</button>
												<button class="btn btn-sm btn-icon btn-outline-danger" title="Delete Permission"
														onclick="showDeleteConfirmationModal('@permission.Name', this.closest('tr'))">
													<i class="ri-delete-bin-line"></i>
												</button>
											</div>
										</td>
									</tr>
								}
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>

		@* Add Permission Modal - NOW PRETTIER! *@
		<div class="modal fade" id="addPermissionModal" tabindex="-1" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered modal-sm">
				@* Changed from modal-simple to modal-sm *@
				<div class="modal-content rounded-lg shadow-xl p-6 bg-white dark:bg-gray-800">
					@* Added these styling classes *@
					<div class="modal-body p-0">
						<button type="button" class="btn-close absolute top-4 right-4 text-gray-500 hover:text-gray-700" data-bs-dismiss="modal" aria-label="Close"></button> @* Positioned close button *@
						<div class="text-center mb-6">
							<h4 class="mb-2 text-2xl font-semibold text-gray-800 dark:text-white">Add New Permission</h4> @* Larger, bolder title *@
							<p class="text-gray-600 dark:text-gray-400">Enter the name for the new permission.</p> @* Updated message and styled *@
						</div>
						<form id="addPermissionForm" class="row g-3" onsubmit="return false">
							<div class="col-12 mb-4">
								@* Increased bottom margin *@
								<div class="form-floating form-floating-outline">
									<input type="text" id="modalPermissionName" name="modalPermissionName" class="form-control rounded-md border border-gray-300 dark:border-gray-600 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white" placeholder="Enter a permission name" tabindex="-1" /> @* Styled input *@
									<label for="modalPermissionName" class="text-gray-700 dark:text-gray-300">Permission Name</label> @* Styled label *@
								</div>
							</div>
							<div class="col-12 text-center flex justify-center space-x-4">
								@* Centered and spaced buttons *@
								<button type="submit" class="btn btn-primary bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md shadow-md transition duration-300">Submit</button> @* Styled primary button *@
								<button type="reset" class="btn btn-outline-secondary border border-gray-300 text-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700 font-bold py-2 px-4 rounded-md shadow-sm transition duration-300" data-bs-dismiss="modal" aria-label="Close">Cancel</button> @* Styled secondary button *@
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>

		@* Custom Modal for editing a permission - Prettier Version *@
		<div class="modal fade" id="editPermissionModal" tabindex="-1" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered modal-sm">
				@* Smaller modal for edit *@
				<div class="modal-content rounded-lg shadow-xl p-6 bg-white dark:bg-gray-800">
					@* Added rounded corners, shadow, padding, and background *@
					<div class="modal-body p-0">
						<button type="button" class="btn-close absolute top-4 right-4 text-gray-500 hover:text-gray-700" data-bs-dismiss="modal" aria-label="Close"></button> @* Positioned close button *@
						<div class="text-center mb-6">
							<h4 class="mb-2 text-2xl font-semibold text-gray-800 dark:text-white">Edit Permission</h4> @* Larger, bolder title *@
							<p class="text-gray-600 dark:text-gray-400">Update the permission name below.</p>
						</div>
						<form class="row g-3" onsubmit="return false;">
							<div class="col-12 mb-4">
								@* Increased bottom margin *@
								<div class="form-floating form-floating-outline">
									<input type="text" id="editModalPermissionName" class="form-control rounded-md border border-gray-300 dark:border-gray-600 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white" placeholder="Enter new permission name" /> @* Styled input *@
									<label for="editModalPermissionName" class="text-gray-700 dark:text-gray-300">Permission Name</label>
								</div>
							</div>
							<div class="col-12 text-center flex justify-center space-x-4">
								@* Centered and spaced buttons *@
								<button type="button" class="btn btn-primary bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md shadow-md transition duration-300" onclick="saveEditedPermission()">Save Changes</button> @* Styled primary button *@
								<button type="button" class="btn btn-outline-secondary border border-gray-300 text-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700 font-bold py-2 px-4 rounded-md shadow-sm transition duration-300" data-bs-dismiss="modal">Cancel</button> @* Styled secondary button *@
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>

		@* Custom Modal for delete confirmation - Prettier Version *@
		<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered modal-sm">
				@* Smaller modal for delete *@
				<div class="modal-content rounded-lg shadow-xl p-6 bg-white dark:bg-gray-800">
					@* Added rounded corners, shadow, padding, and background *@
					<div class="modal-body p-0">
						<button type="button" class="btn-close absolute top-4 right-4 text-gray-500 hover:text-gray-700" data-bs-dismiss="modal" aria-label="Close"></button> @* Positioned close button *@
						<div class="text-center mb-6">
							<h4 class="mb-2 text-2xl font-semibold text-red-600 dark:text-red-400">Confirm Deletion</h4> @* Larger, bolder, red title *@
							<p id="deleteConfirmationMessage" class="text-gray-600 dark:text-gray-400"></p>
						</div>
						<div class="col-12 text-center flex justify-center space-x-4">
							@* Centered and spaced buttons *@
							<button type="button" class="btn btn-danger bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-md shadow-md transition duration-300" onclick="confirmDeletePermission()">Delete</button> @* Styled danger button *@
							<button type="button" class="btn btn-outline-secondary border border-gray-300 text-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700 font-bold py-2 px-4 rounded-md shadow-sm transition duration-300" data-bs-dismiss="modal">Cancel</button> @* Styled secondary button *@
						</div>
					</div>
				</div>
			</div>
		</div>

	</div>
</div>

@section PageScripts {
@* Remix Icons CSS (Ensure this link is included if not globally) *@
	<link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet">
@* Font Awesome (for plus-circle icon if still using) *@
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">


@* Datatables CSS *@
	<link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css">
@* jQuery (if not already loaded) - Datatables requires jQuery *@
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
@* Datatables JS *@
	<script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>

	<script>
		// Global variables to store the current permission name and the table row being edited/deleted
		let currentEditingPermissionName = '';
		let currentEditingRow = null;

		$(document).ready(function() {
			// Initialize DataTables for the permissions table
			$('#permissionsTable').DataTable({
				"paging": true,         // Enable pagination
				"searching": true,      // Enable search box
				"ordering": true,       // Enable sorting on columns
				"info": true,           // Display info about the table
				"lengthChange": true,   // Allow changing number of entries per page
				"pageLength": 10        // Default number of entries per page
			});

			// For Bootstrap 5 alerts to auto-dismiss or be manually dismissible
			var alertList = document.querySelectorAll('.alert')
			alertList.forEach(function (alert) {
				new bootstrap.Alert(alert)
			})
		});

		// Function to show the Edit Permission modal
		function showEditPermissionModal(permissionName, rowElement) {
			currentEditingPermissionName = permissionName;
			currentEditingRow = rowElement;

			// Populate the input field with the current permission name
			document.getElementById('editModalPermissionName').value = permissionName;

			// Show the edit modal
			const editModal = new bootstrap.Modal(document.getElementById('editPermissionModal'));
			editModal.show();
		}

		// Function to save the edited permission (client-side simulation)
		function saveEditedPermission() {
			const newPermissionName = document.getElementById('editModalPermissionName').value.trim();

			if (newPermissionName && currentEditingRow) {
				// Find the cell displaying the permission name and update it
				const nameCell = currentEditingRow.querySelector('.permission-name-cell');
				if (nameCell) {
					nameCell.innerText = newPermissionName;
					// Update the data attribute for consistency, though not strictly necessary for this simulation
					currentEditingRow.dataset.permissionName = newPermissionName;
				}
				// In a real application, you would send an AJAX request to your backend here
				// fetch('/Permissions/UpdatePermission', {
				//      method: 'POST',
				//      headers: { 'Content-Type': 'application/json' },
				//      body: JSON.stringify({ originalName: currentEditingPermissionName, newName: newPermissionName })
				// }).then(response => {
				//      if (response.ok) {
				//          // Update UI or show success
				//          alert('Permission updated successfully!');
				//      } else {
				//          // Handle error
				//          alert('Failed to update permission.');
				//      }
				// });
			}

			// Hide the modal
			const editModal = bootstrap.Modal.getInstance(document.getElementById('editPermissionModal'));
			if (editModal) {
				editModal.hide();
			}
		}

		// Function to show the Delete Confirmation modal
		function showDeleteConfirmationModal(permissionName, rowElement) {
			currentEditingPermissionName = permissionName; // Re-using for delete context
			currentEditingRow = rowElement;

			// Update the confirmation message
			document.getElementById('deleteConfirmationMessage').innerText = `Are you sure you want to delete the permission: "${permissionName}"? This action cannot be undone.`;

			// Show the delete confirmation modal
			const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));
			deleteModal.show();
		}

		// Function to confirm and perform the deletion (client-side simulation)
		function confirmDeletePermission() {
			if (currentEditingRow) {
				// Get the DataTable instance and remove the row
				const table = $('#permissionsTable').DataTable();
				table.row(currentEditingRow).remove().draw();

				// In a real application, you would send an AJAX request to your backend here
				// fetch('/Permissions/DeletePermission', {
				//      method: 'POST',
				//      headers: { 'Content-Type': 'application/json' },
				//      body: JSON.stringify({ name: currentEditingPermissionName })
				// }).then(response => {
				//      if (response.ok) {
				//          // Show success message
				//          alert('Permission deleted successfully!');
				//      } else {
				//          // Handle error
				//          alert('Failed to delete permission.');
				//      }
				// });
			}

			// Hide the modal
			const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmationModal'));
			if (deleteModal) {
				deleteModal.hide();
			}
		}

		// The original showActionMessage is no longer directly used by Edit/Delete buttons,
		// but can be kept for other general messages if needed (e.g., for "Add New Permission" form submission).
		function showActionMessage(actionType, messageContent) {
			const titleElement = document.getElementById('actionMessageTitle');
			const contentElement = document.getElementById('actionMessageContent');

			titleElement.innerText = `${actionType} Action`;
			contentElement.innerText = messageContent;

			const actionModal = new bootstrap.Modal(document.getElementById('actionMessageModal'));
			actionModal.show();
		}

		// Example of how you might use showActionMessage for the "Add New Permission" form
		// This would typically involve an AJAX call to the server to add the permission.
		// For now, it just shows a message.
		document.getElementById('addPermissionForm').addEventListener('submit', function(event) {
			event.preventDefault(); // Prevent default form submission
			const permissionName = document.getElementById('modalPermissionName').value.trim();
			if (permissionName) {
				showActionMessage('Add', `Attempted to add permission: "${permissionName}". This functionality requires backend implementation.`);
				// Optionally clear the input and close the modal
				document.getElementById('modalPermissionName').value = '';
				const addModal = bootstrap.Modal.getInstance(document.getElementById('addPermissionModal'));
				if (addModal) {
					addModal.hide();
				}
			} else {
				showActionMessage('Validation', 'Please enter a permission name.');
			}
		});

	</script>

@* Ensure you have Bootstrap's JS bundle loaded for alerts to dismiss if not already global *@
@* <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script> *@

	<partial name="_ValidationScriptsPartial" />
}
