
@model AspnetCoreMvcFull.Models.JenisForm

@{
    ViewData["Title"] = $"Preview - {Model.Name}";
}

<div class="container">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2>@Model.Name</h2>
                    <p class="text-muted">@Model.Description</p>
                </div>
                <a href="@Url.Action("Builder", new { id = Model.FormTypeId })" class="btn btn-outline-primary">
                    <i class="fas fa-edit me-1"></i>Back to Builder
                </a>
            </div>

            @if (!Model.Sections.Any())
            {
                <div class="text-center py-5">
                    <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No sections to preview</h5>
                    <p class="text-muted">Add sections and items in the builder to see the preview</p>
                </div>
            }
            else
            {
                <form id="auditForm">
                    @foreach (var sec in Model.Sections.OrderBy(s => s.Order))
                    {
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4 class="mb-0">@sec.Title</h4>
                                <small class="text-muted">@sec.Description</small>
                            </div>
                            <div class="card-body">
                                @if (!sec.Items.Any())
                                {
                                    <div class="text-center py-3">
                                        <p class="text-muted">No items in this section</p>
                                    </div>
                                }
                                else
                                {
                                    @foreach (var item in sec.Items.OrderBy(i => i.Order))
                                    {
                                        <div class="mb-4">
                                            @if (item.HasLooping)
                                            {
                                                <div class="alert alert-info">
                                                    <i class="fas fa-redo me-2"></i>
                                                    <strong>Looping Item:</strong> This question repeats @item.LoopCount times for each @item.LoopLabel
                                                </div>
                                                
                                                @for (int i = 1; i <= item.LoopCount; i++)
                                                {
                                                    <div class="border rounded p-3 mb-3">
                                                        <h6 class="text-primary">@item.LoopLabel @i</h6>
                                                        @await Html.PartialAsync("_ItemRenderer", item, new ViewDataDictionary(ViewData) { { "LoopIndex", i } })
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                @await Html.PartialAsync("_ItemRenderer", item)
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }

                    <div class="card bg-light">
                        <div class="card-body">
                            <h5 class="text-primary mb-3">Scoring Summary</h5>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="text-center">
                                        <div class="h4 text-success" id="currentScore">0</div>
                                        <small class="text-muted">Current Score</small>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="text-center">
                                        <div class="h4 text-primary" id="maxScore">@Model.Sections.SelectMany(s => s.Items).Sum(i => i.MaxScore ?? 0)</div>
                                        <small class="text-muted">Maximum Possible</small>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="text-center">
                                        <div class="h4 text-warning" id="percentage">0%</div>
                                        <small class="text-muted">Percentage</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-grid gap-2 mt-4">
                        <button type="button" class="btn btn-primary btn-lg" onclick="submitAuditForm()">
                            Submit Audit Form
                        </button>
                    </div>
                </form>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function calculateScore() {
            let currentScore = 0;
            const maxScore = @Model.Sections.SelectMany(s => s.Items).Sum(i => i.MaxScore ?? 0);

            // Calculate score based on form inputs
            document.querySelectorAll('input, select, textarea').forEach(input => {
                const maxScoreAttr = input.getAttribute('data-max-score');
                if (maxScoreAttr && input.value) {
                    const itemMaxScore = parseInt(maxScoreAttr);
                    
                    if (input.type === 'number') {
                        currentScore += Math.min(parseInt(input.value) || 0, itemMaxScore);
                    } else if (input.type === 'checkbox' && input.checked) {
                        currentScore += itemMaxScore;
                    } else if (input.type === 'radio' && input.checked) {
                        currentScore += itemMaxScore;
                    } else if (input.tagName === 'SELECT' && input.value) {
                        currentScore += itemMaxScore;
                    }
                }
            });

            document.getElementById('currentScore').textContent = currentScore;
            document.getElementById('percentage').textContent = 
                maxScore > 0 ? Math.round((currentScore / maxScore) * 100) + '%' : '0%';
        }

        function submitAuditForm() {
            const formData = new FormData(document.getElementById('auditForm'));
            
            // Here you would typically send the form data to your backend
            alert('Form submitted successfully! (This is a preview - no data was actually saved)');
        }

        // Recalculate score when inputs change
        document.addEventListener('change', calculateScore);
        document.addEventListener('input', calculateScore);
    </script>
}

