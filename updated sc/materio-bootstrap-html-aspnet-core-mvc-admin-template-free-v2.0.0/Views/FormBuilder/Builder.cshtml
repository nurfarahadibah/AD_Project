
@model AspnetCoreMvcFull.Models.ViewModels.FormBuilderViewModel

@{
    ViewData["Title"] = $"Form Builder - {Model.JenisForm.Name}";
}

<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- Field Sidebar -->
        <div class="col-md-3 bg-light border-end p-3">
            <h5>Form Items</h5>
            <div class="d-grid gap-2 mb-4">
                <button class="btn btn-outline-primary btn-sm" onclick="addItem('Text')">
                    <i class="fas fa-font me-2"></i>Text Input
                </button>
                <button class="btn btn-outline-primary btn-sm" onclick="addItem('Number')">
                    <i class="fas fa-hashtag me-2"></i>Number Input
                </button>
                <button class="btn btn-outline-primary btn-sm" onclick="addItem('Textarea')">
                    <i class="fas fa-align-left me-2"></i>Text Area
                </button>
                <button class="btn btn-outline-primary btn-sm" onclick="addItem('Checkbox')">
                    <i class="fas fa-check-square me-2"></i>Checkbox
                </button>
                <button class="btn btn-outline-primary btn-sm" onclick="addItem('Radio')">
                    <i class="fas fa-dot-circle me-2"></i>Radio Button
                </button>
                <button class="btn btn-outline-primary btn-sm" onclick="addItem('Dropdown')">
                    <i class="fas fa-chevron-down me-2"></i>Dropdown
                </button>
                <button class="btn btn-outline-primary btn-sm" onclick="addItem('File')">
                    <i class="fas fa-upload me-2"></i>File Upload
                </button>
                <button class="btn btn-outline-primary btn-sm" onclick="addItem('Signature')">
                    <i class="fas fa-signature me-2"></i>Signature
                </button>
            </div>

            <div class="mt-4">
                <h6 class="text-muted">SmartComply Tips</h6>
                <div class="small text-muted">
                    <p>• Create sections first, then add items</p>
                    <p>• Select items to configure scoring</p>
                    <p>• Use sections to organize compliance areas</p>
                    <p>• Set max scores for audit scoring</p>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="col-md-6 p-3">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <h4>@Model.JenisForm.Name</h4>
                    <p class="text-muted">@Model.JenisForm.Description</p>
                </div>
                <div>
                    <button class="btn btn-success btn-sm me-2" onclick="showAddSectionModal()">
                        <i class="fas fa-plus me-1"></i>Add Section
                    </button>
                    <a href="@Url.Action("Preview", new { id = Model.JenisForm.FormTypeId })" 
                       class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-eye me-1"></i>Preview
                    </a>
                </div>
            </div>

            <div id="sections-container">
                @if (!Model.Sections.Any())
                {
                    <div class="text-center py-5">
                        <i class="fas fa-layer-group fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No sections added yet</h5>
                        <p class="text-muted">Click "Add Section" to create your first section</p>
                    </div>
                }
                else
                {
                    @foreach (var sec in Model.Sections)
                    {
                        <div class="card mb-3" data-section-id="@sec.SectionId">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <div>
                                    <h5 class="mb-0">@sec.Title</h5>
                                    <small class="text-muted">@sec.Description</small>
                                </div>
                                <button class="btn btn-outline-danger btn-sm" onclick="deleteSection(@sec.SectionId)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            <div class="card-body">
                                @if (!sec.Items.Any())
                                {
                                    <div class="text-center py-3">
                                        <p class="text-muted mb-0">No items yet. Select a field type from the sidebar to add questions.</p>
                                    </div>
                                }
                                else
                                {
                                    @foreach (var item in sec.Items.OrderBy(i => i.Order))
                                    {
                                        <div class="border rounded p-3 mb-2 item-card" data-item-id="@item.ItemId" onclick="selectItem(@item.ItemId)">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="flex-grow-1">
                                                    <div class="d-flex align-items-center mb-2">
                                                        <span class="badge bg-primary me-2">@item.ItemType</span>
                                                        @if (item.HasLooping)
                                                        {
                                                            <span class="badge bg-warning me-2">
                                                                <i class="fas fa-redo me-1"></i>@item.LoopCount× @item.LoopLabel
                                                            </span>
                                                        }
                                                        @if (item.MaxScore.HasValue)
                                                        {
                                                            <span class="badge bg-success me-2">Max Score: @item.MaxScore</span>
                                                        }
                                                        @if (item.IsRequired)
                                                        {
                                                            <span class="badge bg-danger me-2">Required</span>
                                                        }
                                                    </div>
                                                    <h6>@item.Question</h6>
                                                    @await Html.PartialAsync("_ItemPreview", item)
                                                </div>
                                                <button class="btn btn-outline-danger btn-sm" onclick="deleteItem(@item.ItemId, event)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Configuration Panel -->
        <div class="col-md-3 bg-light border-start p-3" id="config-panel" style="display: none;">
            <h5>Item Configuration</h5>
            <div id="config-content">
                <!-- Configuration form will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Add Section Modal -->
<div class="modal fade" id="addSectionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Section</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="AddSection" method="post">
                <div class="modal-body">
                    <input type="hidden" name="FormTypeId" value="@Model.JenisForm.FormTypeId" />
                    <div class="mb-3">
                        <label class="form-label">Section Title</label>
                        <input name="Title" class="form-control" placeholder="e.g., General Information" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="Description" class="form-control" rows="3" placeholder="Describe this section..." required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Section</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section PageScripts {
    <script>
        let selectedSectionId = null;

        function showAddSectionModal() {
            new bootstrap.Modal(document.getElementById('addSectionModal')).show();
        }

        function addItem(itemType) {
            if (!selectedSectionId) {
                alert('Please select a section first by clicking on it');
                return;
            }

            fetch('/FormBuilder/AddItem', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `sectionId=${selectedSectionId}&itemType=${itemType}`
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                }
            });
        }

        function selectItem(itemId) {
            // Load item configuration
            fetch(`/FormBuilder/GetItemConfig/${itemId}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById('config-content').innerHTML = html;
                    document.getElementById('config-panel').style.display = 'block';
                });
        }

        function deleteItem(itemId, event) {
            event.stopPropagation();
            if (confirm('Delete this item?')) {
                fetch(`/FormBuilder/DeleteItem/${itemId}`, { method: 'DELETE' })
                    .then(() => location.reload());
            }
        }

        function deleteSection(sectionId) {
            if (confirm('Delete this section and all its items?')) {
                fetch(`/FormBuilder/DeleteSection/${sectionId}`, { method: 'DELETE' })
                    .then(() => location.reload());
            }
        }

        // Section selection
        document.addEventListener('click', function(e) {
            if (e.target.closest('.card[data-section-id]')) {
                document.querySelectorAll('.card[data-section-id]').forEach(card => {
                    card.classList.remove('border-primary');
                });
                
                const sectionCard = e.target.closest('.card[data-section-id]');
                sectionCard.classList.add('border-primary');
                selectedSectionId = sectionCard.dataset.sectionId;
            }
        });
    </script>
}
