@model IEnumerable<AspnetCoreMvcFull.Models.JenisForm>
@{
	ViewData["Title"] = "Form Builder - SmartComply";
	// GETTING THE DISTINCT CATEGORIES FOR THE FILTER DROPDOWN
	// This block was missing in the previous response, causing the errors.
	var distinctCategories = Model
		.Where(f => f.ComplianceCategory != null)
		.Select(f => f.ComplianceCategory)
		.DistinctBy(c => c.Id) // Ensure distinct categories by ID
		.OrderBy(c => c.Name)
		.ToList();

	// GETTING SELECTED FILTER VALUES FROM QUERY STRING
	// This block was also missing.
	var selectedComplianceCategoryId = Context.Request.Query["complianceCategoryId"].ToString();
	var selectedFormStatus = Context.Request.Query["formStatus"].ToString();
}

<div class="container-fluid">
	<div class="row">
		<div class="col-12">
			<div class="d-flex justify-content-between align-items-center mb-4">
				<h1 class="h3">Form Builder Dashboard</h1>
				<a href="@Url.Action("CreateForm")" class="btn btn-primary">
					<i class="fas fa-plus me-2"></i>Create New Form
				</a>
			</div>

			<div class="card mb-4">
				<div class="card-header">
					<h5 class="mb-0">Filter Forms</h5>
				</div>
				<div class="card-body">
					<form asp-action="Index" method="get" class="row g-3 align-items-end">
						<div class="col-md-4">
							<label for="complianceCategoryFilter" class="form-label">Compliance Category</label>
							<select id="complianceCategoryFilter" name="complianceCategoryId" class="form-select">
								<option value="">All Categories</option>
								@foreach (var category in distinctCategories)
								{
									<option value="@category.Id" selected="@(selectedComplianceCategoryId == category.Id.ToString())">
										@category.Name
									</option>
								}
							</select>
						</div>
						<div class="col-md-3">
							<label for="formStatusFilter" class="form-label">Form Status</label>
							<select id="formStatusFilter" name="formStatus" class="form-select">
								<option value="">All Statuses</option>
								@foreach (var status in Enum.GetValues(typeof(FormStatus)))
								{
									<option value="@status" selected="@(selectedFormStatus == status.ToString())">
										@status.ToString()
									</option>
								}
							</select>
						</div>
						<div class="col-md-auto">
							<button type="submit" class="btn btn-secondary">
								<i class="fas fa-filter me-2"></i>Apply Filter
							</button>
							<a href="@Url.Action("Index")" class="btn btn-outline-secondary ms-2">
								<i class="fas fa-sync-alt me-2"></i>Reset
							</a>
						</div>
					</form>
				</div>
			</div>

			@if (!Model.Any())
			{
				<div class="text-center py-5">
					<div class="mb-3">
						<i class="fas fa-file-alt fa-3x text-muted"></i>
					</div>
					<h4 class="text-muted">No forms found matching your criteria</h4>
					<p class="text-muted">Adjust your filters or create a new compliance audit form.</p>
					<a href="@Url.Action("CreateForm")" class="btn btn-primary">Create Form</a>
				</div>
			}
			else
			{
				<div class="row">
					@foreach (var form in Model)
					{
						<div class="col-md-6 col-lg-4 mb-4">
							<div class="card h-100">
								<div class="card-body d-flex flex-column">
									<h5 class="card-title">@form.Name</h5>
									<p class="card-text flex-grow-1">@form.Description</p>
									<div class="mb-3">
										<small class="text-muted d-block">
											<i class="fas fa-building me-1"></i>
											Category: @(form.ComplianceCategory?.Name ?? "N/A")
										</small>
										<small class="text-muted d-block">
											<i class="fas fa-layer-group me-1"></i>
											@form.Sections.Count sections
										</small>
										<small class="text-muted d-block">
											<i class="fas fa-calendar me-1"></i>
											Created @form.CreatedAt.ToString("MMM dd, yyyy")
										</small>
										<small class="d-block mt-2">
											<span class="badge @(form.Status == FormStatus.Published ? "bg-success" : form.Status == FormStatus.Draft ? "bg-info text-dark" : "bg-secondary")">
												<i class="fas fa-circle me-1" style="font-size: 0.7em;"></i>@form.Status.ToString()
											</span>
										</small>
									</div>
									<div class="btn-group w-100">
										<a href="@Url.Action("Builder", new { id = form.FormTypeId })"
										   class="btn btn-outline-primary btn-sm">
											<i class="fas fa-edit me-1"></i>Edit
										</a>
										<a href="@Url.Action("Preview", new { id = form.FormTypeId })"
										   class="btn btn-outline-success btn-sm">
											<i class="fas fa-eye me-1"></i>Preview
										</a>
										<button class="btn btn-outline-danger btn-sm"
												onclick="deleteForm(@form.FormTypeId)">
											<i class="fas fa-trash me-1"></i>Delete
										</button>
									</div>
								</div>
							</div>
						</div>
					}
				</div>
			}
		</div>
	</div>
</div>

@section PageScripts {
	<script>
		// Ensure the anti-forgery token is present on the page.
		// It's typically rendered in _Layout.cshtml or at the top of the view.
		// E.g., @Html.AntiForgeryToken()
		function getAntiForgeryToken() {
			const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
			if (tokenElement) {
				return tokenElement.value;
			}
			console.error("Anti-forgery token not found. Please ensure @Html.AntiForgeryToken() is rendered.");
			return null;
		}

		function deleteForm(formId) {
			// Confirm with the user
			if (confirm('Are you sure you want to archive this form? It will no longer appear in active lists but can be restored later.')) {

				const token = getAntiForgeryToken();
				if (!token) {
					alert('Security token missing. Cannot perform archive operation.');
					return;
				}

				// Create a FormData object to send the anti-forgery token
				const formData = new FormData();
				formData.append('__RequestVerificationToken', token);
				// The formId is passed in the URL, so no need to add it to formData for this specific controller action.

				// Send a POST request to the Delete action
				fetch(`/FormBuilder/Delete/${formId}`, {
					method: 'POST', // Use POST because your controller action is [HttpPost]
					body: formData, // Send the FormData with the token
					headers: {
						'Accept': 'application/json' // Still good to indicate preferred response type
					}
				})
				.then(response => {
					// Check if the response was successful or if it resulted in a redirect
					if (response.ok || response.redirected) {
						location.reload(); // Reload the page to show the updated list
					} else {
						// Handle server-side errors
						return response.text().then(text => {
							try {
								const errorData = JSON.parse(text);
								alert('Error archiving form: ' + (errorData.message || 'Unknown error. Check console.'));
							} catch (e) {
								console.error("Non-JSON error response or parsing error:", text, e);
								alert('Error archiving form. Please try again. (Details in console)');
							}
						});
					}
				})
				.catch(error => {
					// Handle network errors
					console.error('Network or unexpected error during archive:', error);
					alert('An error occurred while archiving the form. Please check your internet connection.');
				});
			}
		}
	</script>
}
