@model IEnumerable<AspnetCoreMvcFull.Models.JenisForm>
@{
	ViewData["Title"] = "Form Builder - SmartComply";
	var distinctCategories = Model
		.Where(f => f.ComplianceCategory != null)
		.Select(f => f.ComplianceCategory)
		.DistinctBy(c => c.Id)
		.OrderBy(c => c.Name)
		.ToList();

	var selectedComplianceCategoryId = Context.Request.Query["complianceCategoryId"].ToString();
	var selectedFormStatus = Context.Request.Query["formStatus"].ToString();
	var currentSortOrder = Context.Request.Query["sortOrder"].ToString();

	// Calculate counts for the mini-dashboard
	var allFormsCount = Model.Count();
	var draftFormsCount = Model.Count(f => f.Status == FormStatus.Draft);
	var publishedFormsCount = Model.Count(f => f.Status == FormStatus.Published);
	var archivedFormsCount = Model.Count(f => f.Status == FormStatus.Archived);
	var revisedFormsCount = Model.Count(f => f.Status == FormStatus.Revised);

	var currentTenantId = ViewBag.CurrentTenantId as string;
}

@* Add Remixicon for icons. It's recommended to add this to your _Layout.cshtml if used across multiple pages. *@
<link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet">

<style>
	/* Custom styles for enhanced aesthetics of the mini-dashboard cards */
	.dashboard-card { /* Renamed from .card to avoid conflicts with general card styles */
		border-radius: 0.75rem; /* Slightly more rounded corners */
		overflow: hidden; /* Ensures content respects border-radius */
	}

		.dashboard-card .card-body {
			padding: 1.5rem; /* Consistent padding */
		}

	.icon-large {
		font-size: 2rem; /* Larger icons for KPIs */
		line-height: 1; /* Adjust line-height for better alignment */
	}

	/* Gradient borders for KPI cards for a modern touch */
	.border-primary-gradient {
		border-color: transparent !important;
		border-image: linear-gradient(to right, #007bff, #6610f2) 1;
		border-width: 2px;
		border-style: solid;
	}

	.border-info-gradient {
		border-color: transparent !important;
		border-image: linear-gradient(to right, #17a2b8, #20c997) 1;
		border-width: 2px;
		border-style: solid;
	}

	.border-success-gradient {
		border-color: transparent !important;
		border-image: linear-gradient(to right, #28a745, #20c997) 1;
		border-width: 2px;
		border-style: solid;
	}

	.border-warning-gradient {
		border-color: transparent !important;
		border-image: linear-gradient(to right, #ffc107, #fd7e14) 1;
		border-width: 2px;
		border-style: solid;
	}
</style>

@Html.AntiForgeryToken()

<div class="container-fluid">
	<div class="row mb-4">
		<div class="col-md-8">
			@if (!string.IsNullOrEmpty(currentTenantId))
			{
				<small class="text-info">Current Tenant: <strong>@currentTenantId</strong></small>
			}
			else
			{
				<small class="text-danger">Current Tenant: (Not Identified)</small>
			}
		</div>
	</div>

	@if (TempData["SuccessMessage"] != null)
	{
		<div class="alert alert-success alert-dismissible fade show" role="alert">
			@TempData["SuccessMessage"]
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	}

	@if (TempData["ErrorMessage"] != null)
	{
		<div class="alert alert-danger alert-dismissible fade show" role="alert">
			@TempData["ErrorMessage"]
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	}
	<div class="row">
		<div class="col-12">
			<div class="d-flex justify-content-between align-items-center mb-4">
				<h1 class="h3">Form Builder Dashboard</h1>
				<a href="@Url.Action("CreateForm")" class="btn btn-primary">
					<i class="ri-add-line me-2"></i>Create New Form
				</a>
			</div>
			<div class="row mb-4 justify-content-center">
				<div class="col-md-3">
					<div class="dashboard-card h-100 shadow-sm border-primary-gradient">
						<div class="card-body d-flex align-items-center">
							@* Added d-flex and align-items-center here *@
							<i class="ri-file-list-line icon-large text-primary me-3"></i> @* Icon moved here with me-3 for spacing *@
							<div>
								<h4 class="text-primary">@allFormsCount</h4>
								<p class="mb-0 text-muted">All Forms</p>
							</div>
						</div>
					</div>
				</div>
				<div class="col-md-3">
					<div class="dashboard-card h-100 shadow-sm border-info-gradient">
						<div class="card-body d-flex align-items-center">
							@* Added d-flex and align-items-center here *@
							<i class="ri-edit-line icon-large text-info me-3"></i> @* Icon moved here with me-3 for spacing *@
							<div>
								<h4 class="text-info">@draftFormsCount</h4>
								<p class="mb-0 text-muted">Draft Forms</p>
							</div>
						</div>
					</div>
				</div>
				<div class="col-md-3">
					<div class="dashboard-card h-100 shadow-sm border-success-gradient">
						<div class="card-body d-flex align-items-center">
							@* Added d-flex and align-items-center here *@
							<i class="ri-check-double-line icon-large text-success me-3"></i> @* Icon moved here with me-3 for spacing *@
							<div>
								<h4 class="text-success">@publishedFormsCount</h4>
								<p class="mb-0 text-muted">Published Forms</p>
							</div>
						</div>
					</div>
				</div>
				<div class="col-md-3">
					<div class="dashboard-card h-100 shadow-sm border-warning-gradient">
						<div class="card-body d-flex align-items-center">
							@* Added d-flex and align-items-center here *@
							<i class="ri-history-line icon-large text-warning me-3"></i> @* Icon moved here with me-3 for spacing *@
							<div>
								<h4 class="text-warning">@revisedFormsCount</h4>
								<p class="mb-0 text-muted">Revised Forms</p>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="card mb-4">
				<div class="card-body">
					<form asp-action="Index" method="get" class="row g-3 align-items-end">
						<div class="col-md-4">
							<label for="complianceCategoryFilter" class="form-label">Compliance Category</label>
							<select id="complianceCategoryFilter" name="complianceCategoryId" class="form-select">
								<option value="">All Categories</option>
								@foreach (var category in distinctCategories)
								{
									<option value="@category.Id" selected="@(selectedComplianceCategoryId == category.Id.ToString())">
										@category.Name
									</option>
								}
							</select>
						</div>
						<div class="col-md-3">
							<label for="formStatusFilter" class="form-label">Form Status</label>
							<select id="formStatusFilter" name="formStatus" class="form-select">
								<option value="">All Statuses</option>
								@foreach (var status in Enum.GetValues(typeof(FormStatus)))
								{
									<option value="@status" selected="@(selectedFormStatus == status.ToString())">
										@status.ToString()
									</option>
								}
							</select>
						</div>
						<div class="col-md-auto">
							<button type="submit" name="sortOrder" value="latest" class="btn btn-outline-secondary ms-2 @(currentSortOrder == "latest" ? "active" : "")">
								<i class="ri-sort-asc me-2"></i>Latest Forms
							</button>
							<button type="submit" class="btn btn-secondary">
								<i class="ri-filter-3-line me-2"></i>Apply
							</button>
							<a href="@Url.Action("Index")" class="btn btn-outline-secondary ms-2">
								<i class="ri-refresh-line me-2"></i>Reset
							</a>
						</div>
					</form>
				</div>
				<div class="card-footer pt-0">
					<ul class="nav nav-tabs card-header-tabs">
						<li class="nav-item">
							<a class="nav-link @(string.IsNullOrEmpty(selectedFormStatus) ? "active" : "")"
							   href="@Url.Action("Index", new { complianceCategoryId = selectedComplianceCategoryId, sortOrder = currentSortOrder, formStatus = "" })">
								All
							</a>
						</li>
						<li class="nav-item">
							<a class="nav-link @(selectedFormStatus == FormStatus.Draft.ToString() ? "active" : "")"
							   href="@Url.Action("Index", new { complianceCategoryId = selectedComplianceCategoryId, formStatus = FormStatus.Draft, sortOrder = currentSortOrder })">
								Draft
							</a>
						</li>
						<li class="nav-item">
							<a class="nav-link @(selectedFormStatus == FormStatus.Published.ToString() ? "active" : "")"
							   href="@Url.Action("Index", new { complianceCategoryId = selectedComplianceCategoryId, formStatus = FormStatus.Published, sortOrder = currentSortOrder })">
								Published
							</a>
						</li>
						<li class="nav-item">
							<a class="nav-link @(selectedFormStatus == FormStatus.Revised.ToString() ? "active" : "")"
							   href="@Url.Action("Index", new { complianceCategoryId = selectedComplianceCategoryId, formStatus = FormStatus.Revised, sortOrder = currentSortOrder })">
								Revised
							</a>
						</li>
						<li class="nav-item">
							<a class="nav-link @(selectedFormStatus == FormStatus.Archived.ToString() ? "active" : "")"
							   href="@Url.Action("Index", new { complianceCategoryId = selectedComplianceCategoryId, formStatus = FormStatus.Archived, sortOrder = currentSortOrder })">
								Archived
							</a>
						</li>
					</ul>
				</div>
			</div>

			@if (!Model.Any())
			{
				<div class="text-center py-5">
					<div class="mb-3">
						<i class="ri-file-line ri-3x text-muted"></i>
					</div>
					<h4 class="text-muted">No forms found matching your criteria</h4>
					<p class="text-muted">Adjust your filters or create a new compliance audit form.</p>
					<a href="@Url.Action("CreateForm")" class="btn btn-primary">Create Form</a>
				</div>
			}
			else
			{
				<div class="row">
					@foreach (var form in Model)
					{
						<div class="col-md-6 col-lg-4 mb-4">
							<div class="card h-100">
								<div class="card-body d-flex flex-column">
									<div class="d-flex justify-content-between align-items-center mb-2">
										<h5 class="card-title mb-0">
											@form.Name
										</h5>
										<span class="badge bg-light text-dark ms-auto" style="font-size: 0.8em;">
											<i class="ri-barcode-line me-1"></i>FormID: @form.FormTypeId
										</span>
									</div>
									<p class="card-text flex-grow-1">@form.Description</p>
									<div class="mb-3">
										<small class="text-muted d-block">
											<i class="ri-building-line me-1"></i>
											Category: @(form.ComplianceCategory?.Name ?? "N/A")
										</small>
										<small class="text-muted d-block">
											<i class="ri-stack-line me-1"></i>
											@form.Sections.Count sections
										</small>
										<small class="text-muted d-block">
											<i class="ri-calendar-line me-1"></i>
											Created @form.CreatedAt.ToString("MMM dd,yyyy")
										</small>
										<small class="d-block mt-2">
											<span class="badge @(form.Status == FormStatus.Published ? "bg-success" : form.Status == FormStatus.Draft ? "bg-info" : form.Status == FormStatus.Revised ? "bg-warning" : "bg-secondary")">
												<i class="ri-checkbox-blank-circle-fill me-1" style="font-size: 0.7em;"></i>@form.Status.ToString()
											</span>
										</small>
									</div>
									<div class="d-flex align-items-center">
										<div class="btn-group flex-grow-1 me-1">
											@if (form.Status == FormStatus.Revised)
											{
												<a href="@Url.Action("Preview", new { id = form.FormTypeId })"
												   class="btn btn-outline-success btn-sm flex-grow-1">
													<i class="ri-eye-line me-1"></i>Preview
												</a>
											}
											else if (form.Status != FormStatus.Archived)
											{
												<a href="@Url.Action("Builder", new { id = form.FormTypeId })"
												   class="btn btn-outline-primary btn-sm">
													<i class="ri-edit-line me-1"></i>Edit
												</a>
												<a href="@Url.Action("Preview", new { id = form.FormTypeId })"
												   class="btn btn-outline-success btn-sm">
													<i class="ri-eye-line me-1"></i>Preview
												</a>
											}
										</div>
										@if (form.Status != FormStatus.Archived && form.Status != FormStatus.Revised)
										{
											<button type="button" class="btn btn-dark btn-sm archive-btn"
													data-bs-toggle="modal" data-bs-target="#archiveConfirmationModal"
													data-form-id="@form.FormTypeId" data-form-name="@form.Name">
												<i class="ri-archive-line me-1"></i>Archive
											</button>
										}
										else if (form.Status == FormStatus.Archived)
										{
											<button type="button" class="btn btn-info btn-sm restore-btn"
													data-bs-toggle="modal" data-bs-target="#restoreConfirmationModal"
													data-form-id="@form.FormTypeId" data-form-name="@form.Name">
												<i class="ri-arrow-go-back-line me-1"></i>Restore
											</button>
										}
									</div>
								</div>
							</div>
						</div>
					}
				</div>
			}
		</div>
	</div>
</div>

<div class="modal fade" id="archiveConfirmationModal" tabindex="-1" aria-labelledby="archiveConfirmationModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content border-danger border-2">
			<div class="modal-header ">
				<h5 class="modal-title" id="archiveConfirmationModalLabel"><i class="ri-alert-fill me-2"></i>Confirm Archive</h5>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to archive "<strong id="archiveFormName"></strong>"? It will no longer appear in active lists but can be restored later.
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<form asp-action="UpdateFormStatus" method="post" asp-antiforgery="true" class="d-inline-block">
					<input type="hidden" name="formTypeId" id="archiveFormTypeId" />
					<input type="hidden" name="newStatus" value="@FormStatus.Archived" />
					<button type="submit" class="btn btn-danger"><i class="ri-archive-line me-1"></i>Archive Form</button>
				</form>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="restoreConfirmationModal" tabindex="-1" aria-labelledby="restoreConfirmationModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content border-info border-2">
			<div class="modal-header ">
				<h5 class="modal-title" id="restoreConfirmationModalLabel"><i class="ri-information-fill me-2"></i>Confirm Restore</h5>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to restore "<strong id="restoreFormName"></strong>" to Draft status?
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<form asp-action="UpdateFormStatus" method="post" asp-antiforgery="true" class="d-inline-block">
					<input type="hidden" name="formTypeId" id="restoreFormTypeId" />
					<input type="hidden" name="newStatus" value="@FormStatus.Draft" />
					<button type="submit" class="btn btn-info"><i class="ri-arrow-go-back-line me-1"></i>Restore Form</button>
				</form>
			</div>
		</div>
	</div>
</div>

@section PageScripts {
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			// Event listener for Archive buttons
			document.querySelectorAll('.archive-btn').forEach(button => {
				button.addEventListener('click', function () {
					const formId = this.dataset.formId;
					const formName = this.dataset.formName;

					const archiveFormNameElement = document.getElementById('archiveFormName');
					const archiveFormTypeIdInput = document.getElementById('archiveFormTypeId');

					if (archiveFormNameElement) {
						archiveFormNameElement.textContent = formName;
					}
					if (archiveFormTypeIdInput) {
						archiveFormTypeIdInput.value = formId;
					}
				});
			});

			// Event listener for Restore buttons
			document.querySelectorAll('.restore-btn').forEach(button => {
				button.addEventListener('click', function () {
					const formId = this.dataset.formId;
					const formName = this.dataset.formName;

					const restoreFormNameElement = document.getElementById('restoreFormName');
					const restoreFormTypeIdInput = document.getElementById('restoreFormTypeId');

					if (restoreFormNameElement) {
						restoreFormNameElement.textContent = formName;
					}
					if (restoreFormTypeIdInput) {
						restoreFormTypeIdInput.value = formId;
					}
				});
			});
		});
	</script>
}
