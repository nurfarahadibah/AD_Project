@model AspnetCoreMvcFull.Models.ViewModels.FormItemViewModel

@{
    var loopIndex = ViewData["LoopIndex"] as int?;
    var existingResponseValue = ViewData["ExistingResponseValue"] as string;
    var inputPrefix = ViewData["InputPrefix"] as string ?? "";

    var inputName = $"{inputPrefix}ResponseValue";
    // Generate a unique ID for the input element to link with the label
    var inputId = $"{inputName.Replace("[", "_").Replace("]", "_").Replace(".", "_")}_{Model.ItemId}";

    var maxScoreAttr = Model.MaxScore.HasValue ? $"data-max-score=\"{Model.MaxScore}\"" : "";

    // IMPORTANT: Assuming OptionsJson stores a List<ItemOption> for items with scores,
    // if it just stores List<string>, then the data-score attribute won't be available.
    List<AspnetCoreMvcFull.Models.ItemOption> options = new List<AspnetCoreMvcFull.Models.ItemOption>();
    if (!string.IsNullOrEmpty(Model.OptionsJson))
    {
        try
        {
            options = System.Text.Json.JsonSerializer.Deserialize<List<AspnetCoreMvcFull.Models.ItemOption>>(Model.OptionsJson, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deserializing options: {ex.Message}");
            options = new List<AspnetCoreMvcFull.Models.ItemOption>();
        }
    }
}

<div class="mb-3">
    <label for="@inputId" class="form-label"> @* Added 'for' attribute to label *@
        @Model.Question
        @if (Model.IsRequired)
        {
            <span class="text-danger">*</span>
        }
        @if (Model.MaxScore.HasValue)
        {
            <span class="text-primary small">(Max Score: @Model.MaxScore)</span>
        }
    </label>

    @switch (Model.ItemTypeName)
    {
        case "Text":
            <input type="text" id="@inputId" name="@inputName" class="form-control" value="@existingResponseValue" @(Model.IsRequired ? "required" : "") @maxScoreAttr />
            break;

        case "Number":
            <input type="number"
                   id="@inputId" @* Added ID attribute *@
                   name="@inputName"
                   class="form-control"
                   value="@existingResponseValue"
                   @(Model.IsRequired ? "required" : "") @* Added required attribute based on Model.IsRequired *@
                   min="0" @* Generally, scores/numbers are non-negative *@
                   max="@(Model.MaxScore ?? int.MaxValue)" @* Set max to Model.MaxScore if available, otherwise large int *@
                   @maxScoreAttr />
            break;

        case "Textarea":
            <textarea id="@inputId" name="@inputName" class="form-control" rows="3" @(Model.IsRequired ? "required" : "") @maxScoreAttr>@existingResponseValue</textarea>
            break;

        case "Checkbox":
            @* Assumes a single checkbox for a boolean true/false scenario for the question *;*
            <div class="form-check">
                <input type="checkbox" id="@inputId" name="@inputName" value="true" class="form-check-input" @(existingResponseValue?.Equals("true", StringComparison.OrdinalIgnoreCase) == true || existingResponseValue?.Equals("on", StringComparison.OrdinalIgnoreCase) == true ? "checked" : null) @maxScoreAttr />
                <label class="form-check-label" for="@inputId">
                    Checked
                </label>
            </div>
            <input type="hidden" name="@inputName" value="false" /> @* Hidden field to ensure 'false' is sent if unchecked *@
            break;

        case "Radio":
            @foreach (var option in options)
            {
                <div class="form-check">
                    <input type="radio" name="@inputName" id="@(inputId)_@option.Value.Replace(" ", "_")" value="@option.Value" class="form-check-input" @(option.Value?.Equals(existingResponseValue, StringComparison.OrdinalIgnoreCase) == true ? "checked" : null) data-score="@(option.Score ?? 0)" @(Model.IsRequired ? "required" : "") @maxScoreAttr />
                    <label class="form-check-label" for="@(inputId)_@option.Value.Replace(" ", "_")">@option.Text</label>
                </div>
            }
            break;

        case "Dropdown":
            <select id="@inputId" name="@inputName" class="form-select" @(Model.IsRequired ? "required" : "") @maxScoreAttr>
                <option value="">Select an option...</option>
                @foreach (var option in options)
                {
                    <option value="@option.Value" selected="@(option.Value?.Equals(existingResponseValue, StringComparison.OrdinalIgnoreCase) == true)" data-score="@(option.Score ?? 0)">@option.Text</option>
                }
            </select>
            break;

        case "File":
            <input type="file" id="@inputId" name="@inputName" class="form-control" @(Model.IsRequired ? "required" : "") @maxScoreAttr />
            @if (!string.IsNullOrEmpty(existingResponseValue))
            {
                <small class="text-muted">Existing file: <a href="@existingResponseValue" target="_blank">View File</a></small>
            }
            break;

        case "Signature":
            <div class="border border-2 border-dashed rounded p-4 text-center">
                <i class="fas fa-signature fa-2x text-muted mb-2"></i>
                <p class="text-muted mb-0">Signature Pad</p>
                <small class="text-muted">Click to sign</small>
                <input type="hidden" id="@inputId" name="@inputName" value="@existingResponseValue" @(Model.IsRequired ? "required" : "") @maxScoreAttr />
            </div>
            break;

        default:
            <p class="text-danger">Unknown Item Type: @Model.ItemTypeName</p>
            break;
    }
</div>
