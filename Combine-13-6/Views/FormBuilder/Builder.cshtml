@model AspnetCoreMvcFull.Models.ViewModels.FormBuilderViewModel
@using Newtonsoft.Json
@using AspnetCoreMvcFull.Models

@{
	ViewData["Title"] = $"Form Builder - {Model.JenisForm.Name}";
}

@* Add Font Awesome CDN (if not already in _Layout.cshtml) *@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha512-Fo3rlrZj/k7ujTnHg4CGR2D7kSs0x30z3B9+P5L9O4x0J/bC7y/p7v0w9s4p0z4+0/66Xn1Z8w2O0f8+0/Q==" crossorigin="anonymous" referrerpolicy="no-referrer" />
@* Add Remixicon CDN (if not really in _Layout.cshtml) *@
<link href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css" rel="stylesheet">

<style>
	/* Custom Styles for Prettiness */
	.sidebar {
		background-color: #f8f9fa; /* Lighter background */
		border-right: 1px solid #e9ecef;
		padding: 1.5rem; /* More padding */
	}

	.main-content {
		padding: 1.5rem;
	}

	.config-panel {
		background-color: #f8f9fa;
		border-left: 1px solid #e9ecef;
		padding: 1.5rem;
		box-shadow: -2px 0 5px rgba(0,0,0,0.05); /* Subtle shadow */
	}

	.btn-item-type {
		display: flex;
		align-items: center;
		justify-content: flex-start; /* Align text to start */
		padding: .75rem 1rem; /* More padding */
		font-size: 0.95rem;
		transition: background-color 0.2s, color 0.2s;
	}

		.btn-item-type i {
			min-width: 25px; /* Ensure icon has consistent space */
			text-align: center;
			margin-right: 0.75rem;
		}

	/* Card styling */
	.card {
		border-radius: 0.75rem; /* More rounded corners */
		box-shadow: 0 4px 10px rgba(0,0,0,0.05); /* Subtle shadow */
		border: 1px solid rgba(0,0,0,0.08); /* Slightly more prominent border */
	}

	.card-header {
		background-color: #e9ecef; /* Slightly darker header */
		border-bottom: 1px solid rgba(0,0,0,0.1);
		border-top-left-radius: 0.75rem;
		border-top-right-radius: 0.75rem;
		padding: 1rem 1.25rem;
	}

	.card-body {
		padding: 1.25rem;
	}

	.item-card {
		border-radius: 0.5rem;
		border: 1px solid #dee2e6;
		padding: 1rem;
		transition: transform 0.2s, box-shadow 0.2s, border-color 0.2s;
		cursor: pointer;
		position: relative; /* For delete button positioning */
	}

		.item-card:hover {
			transform: translateY(-2px); /* Slight lift on hover */
			box-shadow: 0 4px 12px rgba(0,0,0,0.1);
			border-color: #0d6efd; /* Highlight border on hover */
		}

		.item-card.border-primary {
			border-width: 2px; /* Thicker border for selected */
			border-color: #0d6efd !important;
			box-shadow: 0 4px 15px rgba(0,0,0,0.15);
		}

		.item-card .btn-icon {
			opacity: 0.7; /* Make it subtle */
			transition: opacity 0.2s;
		}

			.item-card .btn-icon:hover {
				opacity: 1; /* Full opacity on hover */
			}

	.badge {
		font-size: 0.75em; /* Smaller badges */
		padding: 0.4em 0.6em;
		border-radius: 0.3rem;
	}

	.empty-state {
		padding: 3rem 0;
		color: #6c757d;
		background-color: #f1f3f5; /* Light background for empty state */
		border-radius: 0.75rem;
		margin-top: 1rem;
		margin-bottom: 1rem;
	}

		.empty-state i {
			color: #adb5bd; /* Softer icon color */
		}

	/* Adjust modal header for confirm box */
	#customConfirmModal .modal-header.bg-danger {
		background-color: #dc3545 !important;
	}

	#customConfirmModal .modal-header.bg-info {
		background-color: #0dcaf0 !important;
	}

	#customConfirmModal .modal-header.bg-success {
		background-color: #198754 !important;
	}

	/* Custom style for preview button (changed to dark) */
	.btn-outline-primary.btn-preview-outline {
		border-color: #343a40 !important; /* Dark border color */
		color: #343a40 !important; /* Dark text color */
	}

	.btn-outline-primary.btn-preview-outline:hover {
		background-color: #343a40 !important;
		color: #fff !important;
	}
</style>


<div class="container-fluid h-100">
	<div class="row h-100">
		<div class="col-md-3 sidebar">
			<h5 class="mb-4 text-primary">Form Items</h5>
			<div class="d-grid gap-2 mb-4">
				<button class="btn btn-outline-primary btn-item-type" data-item-type="@ItemType.Text">
					<i class="fas fa-font"></i>Text Input
				</button>
				<button class="btn btn-outline-primary btn-item-type" data-item-type="@ItemType.Number">
					<i class="fas fa-hashtag"></i>Number Input
				</button>
				<button class="btn btn-outline-primary btn-item-type" data-item-type="@ItemType.Textarea">
					<i class="fas fa-align-left"></i>Text Area
				</button>
				<button class="btn btn-outline-primary btn-item-type" data-item-type="@ItemType.Checkbox">
					<i class="fas fa-check-square"></i>Checkbox
				</button>
				<button class="btn btn-outline-primary btn-item-type" data-item-type="@ItemType.Radio">
					<i class="fas fa-dot-circle"></i>Radio Button
				</button>
				<button class="btn btn-outline-primary btn-item-type" data-item-type="@ItemType.Dropdown">
					<i class="fas fa-chevron-down"></i>Dropdown
				</button>
				<button class="btn btn-outline-primary btn-item-type" data-item-type="@ItemType.File">
					<i class="fas fa-upload"></i>File Upload
				</button>
				<button class="btn btn-outline-primary btn-item-type" data-item-type="@ItemType.Signature">
					<i class="fas fa-signature"></i>Signature
				</button>
			</div>
		</div>

		<div class="col-md-6 main-content">
			<div class="d-flex justify-content-between align-items-center mb-4">
				<div>
					<h4 class="mb-0 text-primary">@Model.JenisForm.Name</h4>
					<p class="text-muted mb-0">@Model.JenisForm.Description</p>
				</div>
				<div class="d-flex align-items-center"> @* Added d-flex and align-items-center to align buttons *@
					<button class="btn btn-success me-2" onclick="showAddSectionModal()">
						<i class="fas fa-plus me-1"></i>Add Section
					</button>
					<a href="@Url.Action("Preview", new { id = Model.JenisForm.FormTypeId })"
					   class="btn btn-outline-primary btn-preview-outline"> @* Applied new class *@
						<i class="fas fa-eye me-1"></i>Preview
					</a>
				</div>
			</div>

			<div id="sections-container">
				@if (!Model.Sections.Any())
				{
					<div class="text-center py-5 empty-state">
						<i class="fas fa-layer-group fa-4x mb-3"></i>
						<h5 class="text-muted">No sections added yet</h5>
						<p class="text-muted mb-0">Click the "<i class="fas fa-plus me-1"></i>Add Section" button to create your first section and start building your form.</p>
					</div>
				}
				else
				{
					@foreach (var sec in Model.Sections)
					{
						<div class="card mb-4" data-section-id="@sec.SectionId">
							<div class="card-header d-flex justify-content-between align-items-center">
								<div>
									<h5 class="mb-0">@sec.Title</h5>
									<small class="text-muted">@sec.Description</small>
								</div>
								<button class="btn btn-sm btn-outline-danger" onclick="deleteSection(@sec.SectionId)">
									<i class="ri-delete-bin-line"></i> Delete Section
								</button>
							</div>
							<div class="card-body">
								@if (!sec.Items.Any())
								{
									<div class="text-center py-3 empty-state empty-state-small">
										<p class="text-muted mb-0">No items yet. Select an item type from the left sidebar and click on this section to add questions here.</p>
									</div>
								}
								else
								{
									@foreach (var item in sec.Items.OrderBy(i => i.Order))
									{
										<div class="border rounded p-3 mb-2 item-card" data-item-id="@item.ItemId" onclick="selectItem(@item.ItemId)">
											<div class="d-flex justify-content-between align-items-start">
												<div class="flex-grow-1">
													<div class="d-flex align-items-center mb-2">
														<span class="badge bg-primary me-2">@item.ItemType</span>
														@if (item.HasLooping)
														{
															<span class="badge bg-warning text-dark me-2">
																<i class="fas fa-redo me-1"></i>@(item.LoopCount)Ã— @item.LoopLabel
															</span>
														}
														@if (item.MaxScore.HasValue)
														{
															<span class="badge bg-success me-2">Max Score: @item.MaxScore</span>
														}
														@if (item.IsRequired)
														{
															<span class="badge bg-danger me-2">Required</span>
														}
													</div>
													<h6 class="mb-1">@item.Question</h6>
													<small class="text-muted">
														@if (item.ItemType == ItemType.Radio || item.ItemType == ItemType.Checkbox || item.ItemType == ItemType.Dropdown)
														{
															var options = JsonConvert.DeserializeObject<List<string>>(item.OptionsJson ?? "[]");
															if (options != null && options.Any())
															{
																<span>Options: @string.Join(", ", options)</span>
															}
															else
															{
																<span>No options defined.</span>
															}
														}
														else if (item.ItemType == ItemType.Text)
														{
															<span>Text input field</span>
														}
														else if (item.ItemType == ItemType.Number)
														{
															<span>Number input field</span>
														}
														else if (item.ItemType == ItemType.Textarea)
														{
															<span>Multi-line text area</span>
														}
														else if (item.ItemType == ItemType.File)
														{
															<span>File upload field</span>
														}
														else if (item.ItemType == ItemType.Signature)
														{
															<span>Signature field</span>
														}
													</small>
												</div>
												<div>
													<button class="btn btn-sm btn-icon btn-outline-secondary" onclick="selectItem(@item.ItemId)" title="Edit Item">
														<i class="ri-edit-line"></i>
													</button>
													<button class="btn btn-sm btn-icon btn-outline-danger" onclick="deleteItem(@item.ItemId, event)" title="Delete Item">
														<i class="ri-delete-bin-line"></i>
													</button>
												</div>
											</div>
										</div>
									}
								}
							</div>
						</div>
					}
				}
			</div>
		</div>

		<div class="col-md-3 config-panel" id="config-panel">
			<h5 class="mb-4 text-primary">Tips</h5>
			<div class="small text-muted mb-4"> @* Added mb-4 for margin-bottom before the button *@
				<p class="mb-2">â€¢ Create sections first, then add items.</p>
				<p class="mb-2">â€¢ Select items to configure properties like scoring and looping.</p>
				<p class="mb-2">â€¢ Use sections to organize compliance areas for clarity.</p>
				<p class="mb-2">â€¢ Set max scores for items to enable audit scoring.</p>
			</div>
            @* NEW: Back to Forms Button under Tips *@
            <div class="d-grid">
                <a href="@Url.Action("Index", "FormBuilder")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i>Back to Forms
                </a>
            </div>
		</div>
	</div>
</div>

@* Add Section Modal *@
<div class="modal fade" id="addSectionModal" tabindex="-1" aria-labelledby="addSectionModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header bg-primary text-white">
				<h5 class="modal-title" id="addSectionModalLabel">Add New Section</h5>
				<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<form id="addSectionForm">
				@Html.AntiForgeryToken() @* Anti-forgery token *@
				<div class="modal-body">
					<input type="hidden" name="FormTypeId" value="@Model.JenisForm.FormTypeId" />
					<div class="mb-3">
						<label for="sectionTitle" class="form-label">Section Title</label>
						<input id="sectionTitle" name="Title" class="form-control" placeholder="e.g., General Information" required />
					</div>
					<div class="mb-3">
						<label for="sectionDescription" class="form-label">Description</label>
						<textarea id="sectionDescription" name="Description" class="form-control" rows="3" placeholder="Describe this section..." required></textarea>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<button type="submit" class="btn btn-primary">Add Section</button>
				</div>
			</form>
		</div>
	</div>
</div>

@section PageScripts {
	<script>
		let selectedSectionId = null; // Tracks the currently selected section for adding items
		let currentModal = null; // To keep track of the Bootstrap modal instance

		document.addEventListener('DOMContentLoaded', function () {
			// Initialize Bootstrap modal for Add Section
			currentModal = new bootstrap.Modal(document.getElementById('addSectionModal'), {
				keyboard: false
			});

			// Event listener for "Add Item" buttons in the sidebar
			document.querySelectorAll('.col-md-3.sidebar .btn-item-type').forEach(button => {
				button.addEventListener('click', function() {
					const itemType = this.dataset.itemType;
					addItem(itemType);
				});
			});

			// Event listener for Add Section Form submission
			document.getElementById('addSectionForm').addEventListener('submit', async function (e) {
				e.preventDefault(); // Prevent default form submission
				const form = e.target;
				const formData = new FormData(form);

				const response = await fetch('@Url.Action("AddSection", "FormBuilder")', {
					method: 'POST',
					body: formData,
					headers: {
						'RequestVerificationToken': form.querySelector('input[name="__RequestVerificationToken"]').value
					}
				});

				const result = await response.json();

				if (result.success) {
					currentModal.hide(); // Hide the modal on success
					showMessageBox('Section added successfully!', 'success'); // Using custom message box
					location.reload(); // Reload to show the new section
				} else {
					showMessageBox('Error adding section: ' + (result.errors ? result.errors.join(', ') : 'Unknown error.'), 'error'); // Using custom message box
				}
			});

			// Section selection logic - remains the same
			document.querySelectorAll('.card[data-section-id]').forEach(card => {
				card.addEventListener('click', function() {
					// Remove active border from previously selected section
					document.querySelectorAll('.card[data-section-id]').forEach(c => {
						c.classList.remove('border-primary');
					});
					this.classList.add('border-primary'); // Add active border to clicked section
					selectedSectionId = this.dataset.sectionId;

					// Deselect any selected item cards for visual clarity
					document.querySelectorAll('.item-card').forEach(itemCard => {
						itemCard.classList.remove('border-primary');
					});
				});
			});
		});


		function showAddSectionModal() {
			currentModal.show();
		}

		async function addItem(itemType) {
			if (!selectedSectionId) {
				showMessageBox('Please select a section first by clicking on one of the section cards.', 'warning');
				return;
			}

			const formTypeId = @Model.JenisForm.FormTypeId; // Get formTypeId from Razor Model - for reference, not directly used in AddItem POST
			const antiforgeryToken = document.querySelector('#addSectionForm input[name="__RequestVerificationToken"]').value; // Get token

			const response = await fetch('@Url.Action("AddItem", "FormBuilder")', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
					'RequestVerificationToken': antiforgeryToken
				},
				body: `sectionId=${selectedSectionId}&itemType=${itemType}`
			});

			const result = await response.json();

			if (result.success) {
				showMessageBox('Item added successfully!', 'success');
				location.reload(); // Reload the page to reflect the new item
			} else {
				showMessageBox('Error adding item: ' + (result.message || 'Unknown error.'), 'error');
			}
		}

		// UPDATED: selectItem function to navigate to a new page
		function selectItem(itemId) {
			// This will navigate to the new item configuration page
			window.location.href = '@Url.Action("ConfigureItem", "FormBuilder")/' + itemId;
		}

		async function deleteItem(itemId, event) {
			event.stopPropagation(); // Prevent item selection when delete button is clicked
			if (await showConfirmBox('Are you sure you want to delete this item?', 'danger')) {
				const antiforgeryToken = document.querySelector('#addSectionForm input[name="__RequestVerificationToken"]').value; // Get token

				const response = await fetch(`/FormBuilder/DeleteItem/${itemId}`, {
					method: 'DELETE',
					headers: {
						'RequestVerificationToken': antiforgeryToken
					}
				});

				if (response.ok) {
					showMessageBox('Item deleted successfully!', 'success');
					location.reload(); // Reload the page
				} else {
					const errorData = await response.json();
					showMessageBox('Error deleting item: ' + (errorData.message || 'Unknown error.'), 'error');
				}
			}
		}

		async function deleteSection(sectionId) {
			if (await showConfirmBox('Are you sure you want to delete this section and ALL its items? This action cannot be undone.', 'danger')) {
				const antiforgeryToken = document.querySelector('#addSectionForm input[name="__RequestVerificationToken"]').value; // Get token

				const response = await fetch(`/FormBuilder/DeleteSection/${sectionId}`, {
					method: 'DELETE',
					headers: {
						'RequestVerificationToken': antiforgeryToken
					}
				});

				if (response.ok) {
					showMessageBox('Section and its items deleted successfully!', 'success');
					location.reload(); // Reload the page
				} else {
					const errorData = await response.json();
					showMessageBox('Error deleting section: ' + (errorData.message || 'Unknown error.'), 'error');
				}
			}
		}

		// Custom Message Box (replaces alert())
		function showMessageBox(message, type) {
			const messageBox = document.createElement('div');
			messageBox.className = `alert alert-${type} alert-dismissible fade show fixed-top mx-auto mt-3 w-50`;
			messageBox.setAttribute('role', 'alert');
			messageBox.style.zIndex = '1050'; // Ensure it's above other elements

			messageBox.innerHTML = `
				${message}
				<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
			`;

			document.body.appendChild(messageBox);

			// Automatically close after 5 seconds
			setTimeout(() => {
				const bsAlert = new bootstrap.Alert(messageBox);
				bsAlert.close();
			}, 5000);
		}

		// Custom Confirmation Box (replaces confirm())
		function showConfirmBox(message, type = 'info') {
			return new Promise((resolve) => {
				const confirmModalId = 'customConfirmModal';
				let confirmModalElement = document.getElementById(confirmModalId);

				if (!confirmModalElement) {
					confirmModalElement = document.createElement('div');
					confirmModalElement.className = 'modal fade';
					confirmModalElement.id = confirmModalId;
					confirmModalElement.setAttribute('tabindex', '-1');
					confirmModalElement.setAttribute('aria-hidden', 'true');
					confirmModalElement.innerHTML = `
						<div class="modal-dialog">
							<div class="modal-content">
								<div class="modal-header bg-${type} text-white">
									<h5 class="modal-title">Confirmation</h5>
									<button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
								</div>
								<div class="modal-body">
									<p>${message}</p>
								</div>
								<div class="modal-footer">
									<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
									<button type="button" class="btn btn-${type}" id="confirmActionButton">Confirm</button>
								</div>
							</div>
						</div>
					`;
					document.body.appendChild(confirmModalElement);
				} else {
					// Update content if modal already exists
					confirmModalElement.querySelector('.modal-body p').innerText = message;
					confirmModalElement.querySelector('.modal-header').className = `modal-header bg-${type} text-white`;
					confirmModalElement.querySelector('#confirmActionButton').className = `btn btn-${type}`;
				}

				const confirmModal = new bootstrap.Modal(confirmModalElement);
				confirmModal.show();

				const confirmButton = document.getElementById('confirmActionButton');
				const cancelButton = confirmModalElement.querySelector('.btn-secondary');

				const handleConfirm = () => {
					confirmModal.hide();
					confirmButton.removeEventListener('click', handleConfirm);
					cancelButton.removeEventListener('click', handleCancel);
					confirmModalElement.removeEventListener('hidden.bs.modal', handleHidden);
					resolve(true);
				};

				const handleCancel = () => {
					confirmModal.hide();
					confirmButton.removeEventListener('click', handleConfirm);
					cancelButton.removeEventListener('click', handleCancel);
					confirmModalElement.removeEventListener('hidden.bs.modal', handleHidden);
					resolve(false);
				};

				const handleHidden = () => {
					// If modal is closed without clicking a button (e.g., by escape key or backdrop click)
					confirmButton.removeEventListener('click', handleConfirm);
					cancelButton.removeEventListener('click', handleCancel);
					confirmModalElement.removeEventListener('hidden.bs.modal', handleHidden);
					resolve(false);
				};

				confirmButton.addEventListener('click', handleConfirm);
				cancelButton.addEventListener('click', handleCancel);
				confirmModalElement.addEventListener('hidden.bs.modal', handleHidden);
			});
		}
	</script>
}
