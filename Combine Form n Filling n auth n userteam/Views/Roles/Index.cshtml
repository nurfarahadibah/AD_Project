@model AspnetCoreMvcFull.Models.ViewModels.RolesIndexViewModel 

@{
    ViewData["Title"] = "Roles List";
    // Access data directly from Model properties, no longer from ViewBag
}

@section PageScripts {
    @* Materio theme often uses DataTables and other custom JS for modals/forms.
       Ensure your theme's JS assets are loaded in _Layout.cshtml or here.
       You might need:
       <script src="~/assets/vendor/libs/datatables-bs5/datatables-bootstrap5.js"></script>
       <script src="~/assets/js/app-access-roles.js"></script> (or similar for roles management)
    *@
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- Existing JavaScript for Role Cards (Edit Role Modal) ---
            document.querySelectorAll('.role-edit-modal').forEach(link => {
                link.addEventListener('click', async function (e) {
                    e.preventDefault();
                    const roleId = this.dataset.roleId; // Get roleId from data attribute
                    const modal = new bootstrap.Modal(document.getElementById('addRoleModal'));
                    const modalTitle = document.getElementById('roleModalTitle');
                    const addRoleForm = document.getElementById('addRoleForm');
                    const modalRoleNameInput = document.getElementById('modalRoleName');
                    const modalRoleIdInput = document.getElementById('modalRoleId');

                    modalTitle.textContent = 'Edit Role'; // Change modal title
                    addRoleForm.action = '@Url.Action("AddEditRole", "Roles")'; // Ensure form submits to edit action

                    if (roleId) {
                        try {
                            const response = await fetch(`/Roles/GetRoleForEditModal?roleId=${roleId}`);
                            if (!response.ok) {
                                throw new Error('Failed to fetch role details.');
                            }
                            const roleData = await response.json();

                            modalRoleIdInput.value = roleData.id;
                            modalRoleNameInput.value = roleData.name;

                            // Populate permissions checkboxes
                            // Reset all checkboxes first
                            document.querySelectorAll('#addRoleForm input[type="checkbox"]').forEach(checkbox => {
                                if (checkbox.id !== 'selectAll') {
                                    checkbox.checked = false; // Uncheck all
                                }
                            });
                            document.getElementById('selectAll').checked = false; // Uncheck select all as well

                            // Set selected permissions
                            roleData.permissions.forEach(permission => {
                                // Reconstruct the ID based on how it's generated in the Razor view
                                const checkboxId = `permission_${permission.name.replace(/\s/g, '_').replace(/[^a-zA-Z0-9_]/g, '')}`;
                                const checkbox = document.getElementById(checkboxId);
                                if (checkbox) {
                                    checkbox.checked = permission.isSelected;
                                }
                            });

                            modal.show();
                        } catch (error) {
                            console.error('Error fetching role details:', error);
                            alert('Could not load role details. Please try again.');
                        }
                    }
                });
            });

            // "Select All" permissions checkbox logic (for the modal)
            const selectAllCheckbox = document.getElementById('selectAll');
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function () {
                    document.querySelectorAll('#addRoleForm input[type="checkbox"]').forEach(checkbox => {
                        if (checkbox.id !== 'selectAll') {
                            checkbox.checked = this.checked;
                        }
                    });
                });
            }

            // Handle success/error messages from TempData
            // const successMessage = '@TempData["SuccessMessage"]';
            const errorMessage = '@TempData["ErrorMessage"]';

            if (successMessage && successMessage !== '') {
                // Implement Materio's toastr/alert system if available, else use alert
                alert(successMessage);
            }
            if (errorMessage && errorMessage !== '') {
                alert('Error: ' + errorMessage);
            }

            // --- JavaScript for the User Table Filters (Show, Export, Search, Select Role) ---
            const userTableFilterForm = document.getElementById('userTableFilterForm');
            const showEntriesSelect = document.getElementById('showEntries');
            const searchUserInput = document.getElementById('searchUser');
            const selectRoleDropdown = document.getElementById('selectRole');

            // Function to submit the form, optionally with a specific page number
            function submitUserTableForm(page = 1) {
                if (userTableFilterForm) {
                    // Update hidden input for page number if it exists, or create it
                    let pageInput = document.getElementById('currentPageInput');
                    if (!pageInput) {
                        pageInput = document.createElement('input');
                        pageInput.type = 'hidden';
                        pageInput.id = 'currentPageInput';
                        pageInput.name = 'page';
                        userTableFilterForm.appendChild(pageInput);
                    }
                    pageInput.value = page;

                    userTableFilterForm.submit();
                }
            }

            if (showEntriesSelect) {
                showEntriesSelect.addEventListener('change', () => submitUserTableForm(1)); // Reset to page 1 on entries change
            }

            if (searchUserInput) {
                searchUserInput.addEventListener('keyup', function (event) {
                    if (event.key === 'Enter') {
                        submitUserTableForm(1); // Reset to page 1 on search
                    }
                });
            }

            if (selectRoleDropdown) {
                selectRoleDropdown.addEventListener('change', () => submitUserTableForm(1)); // Reset to page 1 on role change
            }

            // Pagination links click handler
            document.querySelectorAll('.page-link').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    const pageNum = this.dataset.page;
                    if (pageNum) {
                        submitUserTableForm(parseInt(pageNum));
                    }
                });
            });


            // Export button functionality (client-side simple example)
            document.getElementById('exportButton').addEventListener('click', function() {
                // In a real application, you'd make an AJAX call to a backend endpoint
                // that generates and returns a file (e.g., CSV, Excel).
                // For a simple client-side demo, you could construct a CSV from table data.
                alert('Export functionality would be implemented here!');
                // Example: window.location.href = '/Users/ExportUsers?format=csv';
            });

            // Handle individual row checkboxes and "Select All" for the user table
            const selectAllUsersCheckbox = document.getElementById('selectAllUsers');
            const userCheckboxes = document.querySelectorAll('.user-checkbox');

            if (selectAllUsersCheckbox) {
                selectAllUsersCheckbox.addEventListener('change', function() {
                    userCheckboxes.forEach(checkbox => {
                        checkbox.checked = this.checked;
                    });
                });
            }

            userCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    if (!this.checked) {
                        if (selectAllUsersCheckbox) {
                            selectAllUsersCheckbox.checked = false;
                        }
                    } else {
                        // If all individual checkboxes are checked, check "Select All"
                        const allChecked = Array.from(userCheckboxes).every(cb => cb.checked);
                        if (selectAllUsersCheckbox) {
                            selectAllUsersCheckbox.checked = allChecked;
                        }
                    }
                });
            });
        });
    </script>
}

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="mb-1">Roles List</h4>
        <p class="mb-6">A role provided access to predefined menus and features so that depending on assigned role an administrator can have access to what user needs.</p>

        <div class="row g-6">
            @if (Model.RoleCards != null) @* Access RoleCards from Model *@
            {
                @foreach (var roleCard in Model.RoleCards) @* Iterate through Model.RoleCards *@
                {
                    <div class="col-xl-4 col-lg-6 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-4">
                                    <p class="mb-0">Total @roleCard.UserCount users</p>
                                    <ul class="list-unstyled d-flex align-items-center avatar-group mb-0">
                                        @* Dynamically generate user avatars here if you have user image paths *@
                                        @* For now, static placeholders or first letter of username *@
                                        @if (roleCard.UserCount > 0)
                                        {
                                            @* Example: display first 3 users or a generic avatar *@
                                            <li class="avatar pull-up">
                                                <span class="avatar-initial rounded-circle bg-label-secondary" data-bs-toggle="tooltip" data-bs-placement="top" title="@roleCard.Name User">
                                                    @roleCard.Name.Substring(0, 1).ToUpper()
                                                </span>
                                            </li>
                                            @if (roleCard.UserCount > 1)
                                            {
                                                <li class="avatar">
                                                    <span class="avatar-initial rounded-circle pull-up text-body" data-bs-toggle="tooltip" data-bs-placement="bottom" title="@(roleCard.UserCount - 1) more">
                                                        +@(roleCard.UserCount - 1)
                                                    </span>
                                                </li>
                                            }
                                        }
                                    </ul>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="role-heading">
                                        <h5 class="mb-1">@roleCard.Name</h5>
                                        <a href="javascript:;" data-bs-toggle="modal" data-bs-target="#addRoleModal" class="role-edit-modal" data-role-id="@roleCard.Id">
                                            <p class="mb-0">Edit Role</p>
                                        </a>
                                    </div>
                                    @* Copy Role button - functionality not implemented here *@
                                    <a href="javascript:void(0);" class="text-secondary"><i class="ri-file-copy-line ri-22px"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="col-12 mt-6">
            <h4 class="mb-1">Total users with their roles</h4>
            <p class="mb-0">Find all of your company’s administrator accounts and their associate roles.</p>
        </div>
        <div class="col-12">
            <div class="card mt-4"> @* Added mt-4 class for top margin *@
                <div class="card-header border-bottom">
                    @* Added form tag for filter submission *@
                    <form id="userTableFilterForm" asp-action="Index" asp-controller="Roles" method="get">
                        <div class="d-flex justify-content-between align-items-center row pb-2 gap-4 gap-md-0">
                            <div class="col-md-3">
                                <div class="d-flex align-items-center">
                                    <label for="showEntries" class="me-2">Show</label>
                                    <select id="showEntries" name="showEntries" class="form-select w-auto" asp-for="ShowEntries"> @* Added asp-for *@
                                        <option value="10">10</option>
                                        <option value="25">25</option>
                                        <option value="50">50</option>
                                        <option value="100">100</option>
                                    </select>
                                    <label for="showEntries" class="ms-2">entries</label>
                                </div>
                            </div>
                            <div class="col-md-9 d-flex justify-content-end align-items-center flex-wrap gap-3">
                                <button class="btn btn-label-secondary" id="exportButton" type="button"> @* Changed type to button to prevent form submission *@
                                    <i class="ri-upload-2-line me-2"></i>Export
                                </button>
                                <div class="input-group input-group-outline w-auto">
                                    <input type="text" id="searchUser" name="searchUser" class="form-control" placeholder="Search User" asp-for="SearchUser"> @* Added asp-for *@
                                    <span class="input-group-text cursor-pointer"><i class="ri-search-line"></i></span>
                                </div>
                                <select id="selectRole" name="selectRole" class="form-select w-auto" asp-for="SelectedRole"> @* Added asp-for *@
                                    @foreach (var role in Model.AvailableRoles) @* Dynamically populate roles *@
                                    {
                                        <option value="@role.Value">@role.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="card-datatable table-responsive datatable-roles">
                    <table class="datatables-users table">
                        <thead>
                            <tr>
                                <th>
                                    <input class="form-check-input" type="checkbox" id="selectAllUsers" />
                                </th> @* Checkbox for selecting all users *@
                                <th></th> @* Another placeholder, often for avatar/status indicator *@
                                <th>User</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Status</th> @* Placeholder for Status *@
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.UserRolesList == null || !Model.UserRolesList.Any()) @* Access UserRolesList from Model *@
                            {
                                <tr>
                                    <td colspan="8" class="text-center py-4 text-muted">No users found.</td> @* Adjusted colspan *@
                                </tr>
                            }
                            else
                            {
                                @foreach (var user in Model.UserRolesList) @* Iterate through Model.UserRolesList *@
                                {
                                    <tr>
                                        <td>
                                            <input class="form-check-input user-checkbox" type="checkbox" data-user-id="@user.UserId" />
                                        </td> @* Checkbox for individual user *@
                                        <td></td> @* Placeholder cell *@
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar me-3">
                                                    <span class="avatar-initial rounded-circle bg-label-secondary">
                                                        @user.UserName.Substring(0, 1).ToUpper()
                                                    </span>
                                                </div>
                                                <div class="d-flex flex-column">
                                                    <h6 class="text-truncate mb-0">@user.UserName</h6>
                                                    <small class="text-truncate text-muted">@user.Email</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>@user.Email</td>
                                        <td>
                                            @if (user.Roles.Any())
                                            {
                                                @string.Join(", ", user.Roles)
                                            }
                                            else
                                            {
                                                <span class="text-muted">No Role</span>
                                            }
                                        </td>
                                        <td><span class="badge bg-label-success">Active</span></td> @* Placeholder for Status *@
                                        <td>
                                            <div class="d-inline-block text-nowrap">
                                                <a asp-controller="UserRoleAssignment" asp-action="ManageRoles" asp-route-userId="@user.UserId" class="btn btn-sm btn-icon" title="Manage Roles">
                                                    <i class="ri-edit-line"></i>
                                                </a>
                                                @* Optional: Link to delete user from here if desired, or keep it on User Management page *@
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                @* Updated: Pagination and info section at the bottom of the card to be on one row *@
                <div class="card-footer d-flex justify-content-between align-items-center flex-wrap gap-3">
                    <div class="dataTables_info" id="DataTables_Table_0_info" role="status" aria-live="polite">
                        @{
                            var startEntry = (Model.CurrentPage - 1) * Model.ShowEntries + 1;
                            var endEntry = Math.Min(Model.CurrentPage * Model.ShowEntries, Model.TotalUsers);
                        }
                        Showing @startEntry to @endEntry of @Model.TotalUsers entries
                    </div>
                    <div class="d-flex justify-content-end">
                        <nav aria-label="Page navigation">
                            <ul class="pagination">
                                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" href="javascript:void(0);" data-page="@(Model.CurrentPage - 1)">
                                        <i class="tf-icon ri-arrow-left-s-line"></i>
                                    </a>
                                </li>
                                @for (int i = 1; i <= Model.TotalPages; i++)
                                {
                                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="javascript:void(0);" data-page="@i">@i</a>
                                    </li>
                                }
                                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                                    <a class="page-link" href="javascript:void(0);" data-page="@(Model.CurrentPage + 1)">
                                        <i class="tf-icon ri-arrow-right-s-line"></i>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="addRoleModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-simple modal-dialog-centered modal-add-new-role">
            <div class="modal-content">
                <div class="modal-body p-0">
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    <div class="text-center mb-6">
                        <h4 class="role-title mb-2 pb-0" id="roleModalTitle">Add New Role</h4>
                        <p>Set role permissions</p>
                    </div>
                    <form id="addRoleForm" class="row g-3" asp-action="AddEditRole" asp-controller="Roles" method="post">
                        <input type="hidden" id="modalRoleId" name="Id" value="" /> @* Hidden input for Role ID *@
                        <div class="col-12 mb-3">
                            <div class="form-floating form-floating-outline">
                                <input type="text" id="modalRoleName" name="Name" class="form-control" placeholder="Enter a role name" tabindex="-1" required />
                                <label for="modalRoleName">Role Name</label>
                            </div>
                            @* Corrected validation span to bind to the Name property of the AddEditRoleForm sub-model *@
                            <span asp-validation-for="AddEditRoleForm.Name" class="text-danger"></span>
                        </div>
                        <div class="col-12">
                            <h5>Role Permissions</h5>
                            <div class="table-responsive">
                                <table class="table table-flush-spacing">
                                    <tbody>
                                        <tr>
                                            <td class="text-nowrap fw-medium">Administrator Access <i class="ri-information-line" data-bs-toggle="tooltip" data-bs-placement="top" title="Allows a full access to the system"></i></td>
                                            <td>
                                                <div class="d-flex justify-content-end">
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox" id="selectAll" />
                                                        <label class="form-check-label" for="selectAll">
                                                            Select All
                                                        </label>
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                        @* Dynamically render permission checkboxes from the AddEditRoleForm sub-model *@
                                        @if (Model.AddEditRoleForm.Permissions != null) @* Access Permissions from Model.AddEditRoleForm *@
                                        {
                                            @for (int i = 0; i < Model.AddEditRoleForm.Permissions.Count; i++)
                                            {
                                                var permission = Model.AddEditRoleForm.Permissions[i];
                                                // Create a valid ID for the checkbox based on the permission name
                                                var checkboxId = $"permission_{permission.Name.Replace(" ", "_").Replace("(", "").Replace(")", "")}";
                                                <tr>
                                                    <td class="text-nowrap fw-medium">
                                                        @permission.Name
                                                        @if (permission.Name.Contains("Management"))
                                                        {
                                                            <i class="ri-information-line" data-bs-toggle="tooltip" data-bs-placement="top" title="Manage @permission.Name.Replace(" Management", "")"></i>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div class="d-flex justify-content-end">
                                                            <div class="form-check">
                                                                <input type="hidden" name="AddEditRoleForm.Permissions[@i].Name" value="@permission.Name" />
                                                                <input class="form-check-input" type="checkbox" name="AddEditRoleForm.Permissions[@i].IsSelected" value="true" id="@checkboxId" />
                                                                <label class="form-check-label" for="@checkboxId">
                                                                    Select
                                                                </label>
                                                            </div>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="col-12 text-center">
                            <button type="submit" class="btn btn-primary me-3">Submit</button>
                            <button type="reset" class="btn btn-outline-secondary" data-bs-dismiss="modal" aria-label="Close">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
