@model AspnetCoreMvcFull.Models.ComplianceFolder
@{
	ViewData["Title"] = "Folder Details";
}

<div class="container mt-4">
	<div class="row mb-4">
		<div class="col-md-9">
			<h3 class="display-5">@Model.Name</h3>
			<p class="lead text-muted">Compliance Type: <span class="badge bg-secondary">@Model.ComplianceType</span></p>
			<p><strong>Description:</strong> @(Model.Description ?? "No description provided.")</p>
			<p><strong>Created By:</strong> @Model.CreatedBy on @Model.CreatedDate.ToString("MMM dd,yyyy 'at' hh:mm tt")</p>
			<p><strong>Status:</strong> <span class="badge @(Model.Status == AspnetCoreMvcFull.Models.FolderStatus.Completed ? "bg-success" : "bg-warning")">@Model.Status.ToString()</span></p>
		</div>
		<div class="col-md-3 text-end">
			@* Keep this button for general folder uploads, if you want a separate page for that *@
			<a href="@Url.Action("UploadDocument", new { folderId = Model.Id })" class="btn btn-primary mb-2">
				<i class="fas fa-upload"></i> Upload General Document
			</a>
			<a href="@Url.Action("Index")" class="btn btn-outline-secondary">
				<i class="fas fa-arrow-left"></i> Back to Folders
			</a>
		</div>
	</div>

	<hr />

	<div class="row">
		<div class="col-md-12">
			@* This div is now full width based on your provided code *@
			<div class="card mb-4">
				<div class="card-header">
					<h5>Required Documents Checklist</h5>
				</div>
				<ul class="list-group list-group-flush">
					@if (Model.RequiredDocuments != null && Model.RequiredDocuments.Any())
					{
						@foreach (var reqDoc in Model.RequiredDocuments.OrderByDescending(rd => rd.IsSubmitted))
						{
							<li class="list-group-item d-flex justify-content-between align-items-center">
								<div>
									<i class="fas @(reqDoc.IsSubmitted ? "fa-check-circle text-success" : "fa-exclamation-circle text-warning") me-2"></i>
									<strong>@reqDoc.DocumentName</strong>
									@if (!string.IsNullOrEmpty(reqDoc.Description))
									{
										<br />

										<small class="text-muted">@reqDoc.Description</small>
									}
									@if (reqDoc.IsSubmitted)
									{
										<br />

										<small class="text-muted">Submitted By: @(reqDoc.SubmittedBy ?? "N/A") on @reqDoc.SubmissionDate?.ToString("MMM dd,yyyy hh:mm tt")</small>
									}
								</div>
								<div>
									@* NEW: Upload button for each required document, and "Submitted" badge *@
									@if (!reqDoc.IsSubmitted)
									{
										<button type="button" class="btn btn-outline-secondary btn-sm upload-required-doc-btn"
												data-bs-toggle="modal"
												data-bs-target="#uploadDocumentModal"
												data-required-doc-id="@reqDoc.Id"
												data-required-doc-name="@reqDoc.DocumentName"
												data-compliance-folder-id="@Model.Id" @* Pass parent folder ID *@
												title="Upload document for this requirement">
											<i class="fas fa-upload"></i> Upload
										</button>
									}
									else
									{
										<span class="badge bg-success">Submitted</span>
									}
								</div>
							</li>
							@* Display associated documents for this RequiredDocument (moved outside of the main list item for better structure if you had multiple buttons/badges, but maintaining your original flow here) *@
							@if (reqDoc.Documents != null && reqDoc.Documents.Any())
							{
								<li class="list-group-item ms-4 border-start ps-3 py-2">
									@* This li will be directly after the main li for the reqDoc *@
									<small class="text-muted">Associated Documents:</small>
									<ul class="list-unstyled mb-0">
										@foreach (var associatedDoc in reqDoc.Documents.OrderByDescending(d => d.UploadDate))
										{
											<li>
												<i class="fas fa-file-alt me-1"></i> @associatedDoc.FileName
												<a href="@Url.Action("DownloadDocument", new { id = associatedDoc.Id })" class="btn btn-sm btn-outline-info ms-2" data-bs-toggle="tooltip" title="Download this associated document">
													<i class="fas fa-download"></i>
												</a>
											</li>
										}
									</ul>
								</li>
							}
						}
					}
					else
					{
						<li class="list-group-item text-muted">No specific required documents for this folder.</li>
					}
				</ul>
			</div>
		</div>
	</div>

	<div class="card mb-4">
		<div class="card-header">
			<h5>Uploaded Documents</h5>
		</div>
		<div class="card-body">
			@if (Model.Documents != null && Model.Documents.Any())
			{
				<div class="table-responsive">
					<table class="table table-striped table-hover">
						<thead>
							<tr>
								<th>File Name</th>
								<th>Description</th>
								<th>Uploaded By</th>
								<th>Upload Date</th>
								<th>Size</th>
								<th>Actions</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var doc in Model.Documents.OrderByDescending(d => d.UploadDate))
							{
								<tr>
									<td><i class="fas fa-file me-2"></i> @doc.FileName</td>
									<td>@(doc.Description ?? "N/A")</td>
									<td>@doc.UploadedBy</td>
									<td>@doc.UploadDate.ToString("MMM dd,yyyy")</td>
									<td>@(Math.Round((double)doc.FileSize / 1024 / 1024, 2)) MB</td>
									<td>
										<a href="@Url.Action("DownloadDocument", new { id = doc.Id })" class="btn btn-info btn-sm" data-bs-toggle="tooltip" title="Download">
											<i class="fas fa-download"></i>
										</a>
										@* Add other actions like View/Delete if needed *@
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
			else
			{
				<p class="text-muted text-center">No documents have been uploaded to this folder yet. <a href="@Url.Action("UploadDocument", new { folderId = Model.Id })">Upload one now!</a></p>
			}
		</div>
	</div>
</div>

<div class="modal fade" id="uploadDocumentModal" tabindex="-1" aria-labelledby="uploadDocumentModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="uploadDocumentModalLabel">Upload Document for: <span id="modalRequiredDocName"></span></h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<form id="uploadModalForm" asp-action="UploadDocument" method="post" enctype="multipart/form-data">
				<div class="modal-body">
					<div asp-validation-summary="ModelOnly" class="text-danger"></div>
					<input type="hidden" id="modalComplianceFolderId" name="ComplianceFolderId" value="@Model.Id" />
					<input type="hidden" id="modalSelectedRequiredDocumentId" name="SelectedRequiredDocumentId" />

					<div class="mb-3">
						<label for="modalFile" class="form-label">Select File</label>
						<input type="file" id="modalFile" name="File" class="form-control" required />
						<span class="text-danger" data-valmsg-for="File"></span>
					</div>

					<div class="mb-3">
						<label for="modalDescription" class="form-label">Description (Optional)</label>
						<textarea id="modalDescription" name="Description" class="form-control" rows="3"></textarea>
						<span class="text-danger" data-valmsg-for="Description"></span>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<button type="submit" class="btn btn-primary">Upload Document</button>
				</div>
			</form>
		</div>
	</div>
</div>

@section PageScripts {
	<partial name="_ValidationScriptsPartial" />
	<script>
		$(function () {
			// Initialize tooltips
			$('[data-bs-toggle="tooltip"]').tooltip();

			// Handle the click event for "Upload" buttons
			$('.upload-required-doc-btn').on('click', function () {
				var requiredDocId = $(this).data('required-doc-id');
				var requiredDocName = $(this).data('required-doc-name');
				// The compliance folder ID is already in the hidden input's value, as it's the model's ID

				// Populate the modal fields
				$('#modalRequiredDocName').text(requiredDocName);
				$('#modalSelectedRequiredDocumentId').val(requiredDocId);
				// No need to set modalComplianceFolderId here, it's already set to Model.Id in the HTML

				// Clear previous form data and validation messages when modal opens
				$('#uploadModalForm')[0].reset(); // Resets the form
				$('#uploadModalForm').find('.text-danger').empty(); // Clear validation messages
				$('#uploadModalForm').find('.is-invalid').removeClass('is-invalid'); // Clear invalid styles
			});

			// Handle modal form submission with AJAX for a smoother experience
			$('#uploadModalForm').on('submit', function (e) {
				e.preventDefault(); // Prevent default form submission

				var form = $(this);
				// Re-validate the form for client-side validation
				if (!form.valid()) {
					return; // Stop if form is not valid
				}

				var formData = new FormData(form[0]); // Get form data, including files

				$.ajax({
					url: form.attr('asp-action'), // Get the action URL from asp-action attribute
					type: form.attr('method'),    // Get the method from method attribute
					data: formData,
					processData: false, // Important: tell jQuery not to process the data
					contentType: false, // Important: tell jQuery not to set contentType
					success: function (response) {
						// Assuming your controller redirects on success,
						// a full page reload is often the simplest way to update the UI
						// after a successful upload from a modal that's handled by a standard POST action.
						window.location.reload();
					},
					error: function (xhr, status, error) {
						console.error("Upload error:", error);
						// You could parse xhr.responseText if your controller returns specific error messages
						alert("An error occurred during upload. Please try again.");
						window.location.reload(); // Reload to clear modal and attempt again
					}
				});
			});

			// Re-enable client-side validation for the modal form after it's shown
			$('#uploadDocumentModal').on('shown.bs.modal', function() {
				var form = $('#uploadModalForm');
				// Unbind and rebind validator to ensure it works correctly for dynamic content
				form.removeData('validator');
				form.removeData('unobtrusiveValidation');
				$.validator.unobtrusive.parse(form);
			});
		});
	</script>
}
